CREATE TABLE TREN (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    achizitie DATE NOT NULL,
    valabil NUMBER(1, 0) DEFAULT 0,
    tip VARCHAR2(20 CHAR) NOT NULL,
    nume_garaj VARCHAR2(20 CHAR) NOT NULL,
    CONSTRAINT PK_ID PRIMARY KEY(id)
);

-- Adăugare constraint CK_TIP
ALTER TABLE TREN
ADD CONSTRAINT CK_TIP CHECK (tip IN ('marfar', 'pasageri'));

-- Redenumirea coloanei valabil în available
ALTER TABLE TREN
RENAME COLUMN valabil TO available;

-- Ștergerea coloanei in_garaj
ALTER TABLE Tren
DROP COLUMN nume_garaj;


CREATE TABLE ORAS (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nume VARCHAR2(250 CHAR) NOT NULL,
    judet VARCHAR2(250 CHAR) NOT NULL,
    CONSTRAINT PK_ORAS_ID PRIMARY KEY(id),
    CONSTRAINT CK_Judet CHECK(judet IN (
        'Alba', 'Arad', 'Argeș', 
        'Bacău', 'Bihor', 'Bistrița-Năsăud',
        'Călărași', 'Caraș-Severin', 'Cluj', 'Constanța',
        'Dâmbovița', 'Dolj', 'Galați', 'Giurgiu', 'Gorj',
        'Harghita', 'Hunedoara', 'Ialomița', 'Iași',
        'Maramureș', 'Mehedinți', 'Mureș',
        'Olt', 'Prahova', 'Sălaj',
        'Sibiu', 'Suceava', 
        'Tulcea', 'Vaslui', 'Vâlcea', 'Vrancea'
    )),
    CONSTRAINT UK_Locatie UNIQUE(nume, judet)
);

INSERT INTO ORAS (nume, judet) VALUES ('Alba Iulia', 'Alba');
INSERT INTO ORAS (nume, judet) VALUES ('Arad', 'Arad');
INSERT INTO ORAS (nume, judet) VALUES ('Bacău', 'Bacău');
INSERT INTO ORAS (nume, judet) VALUES ('Oradea', 'Bihor');
INSERT INTO ORAS (nume, judet) VALUES ('Bistrita', 'Bistrița-Năsăud');

CREATE TABLE STATIE (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    oras NUMBER NOT NULL,
    restaurant NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_ID_Oras FOREIGN KEY (oras) REFERENCES ORAS(id),
    CONSTRAINT PK_STATIE_ID PRIMARY KEY(id)
);

CREATE TABLE CONDUCTOR (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nume VARCHAR2(250 CHAR) NOT NULL,
    prenume VARCHAR2(250 CHAR) NOT NULL,
    nr_tel VARCHAR2(50 CHAR),
    nr_calatori NUMBER DEFAULT 0,
    CONSTRAINT PK_CONDUCTOR_ID PRIMARY KEY(id)
);

CREATE TABLE CALATORIE (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    "start" NUMBER NOT NULL, 
    finish NUMBER NOT NULL,
    durata NUMBER NOT NULL,
    pret NUMBER NOT NULL,
    CONSTRAINT PK_CALATORIE_ID PRIMARY KEY(id),
    CONSTRAINT FK_Start FOREIGN KEY ("start") REFERENCES STATIE(id),
    CONSTRAINT FK_Finish FOREIGN KEY (finish) REFERENCES STATIE(id),
    CONSTRAINT CK_Pret CHECK(pret > 0),
    CONSTRAINT CK_Durata CHECK(durata > 0)
);


CREATE TABLE PROGRAM (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    calatorie NUMBER NOT NULL,
    conductor NUMBER NOT NULL,
    tren NUMBER NOT NULL,
    plecare DATE NOT NULL,
    CONSTRAINT PK_ID1 PRIMARY KEY(id),
    CONSTRAINT FK_Calatorie FOREIGN KEY (calatorie) REFERENCES CALATORIE(id),
    CONSTRAINT FK_Conductor FOREIGN KEY (conductor) REFERENCES Conductor(id),
    CONSTRAINT FK_Tren FOREIGN KEY (tren) REFERENCES Tren(id)
);
---vederea structuri tabelelor-----
CREATE OR REPLACE VIEW structura_tabele AS
SELECT 
    table_name,
    column_name,
    data_type,
    data_length,
    nullable,
    data_default
FROM 
    all_tab_columns
WHERE 
    table_name IN ('TREN', 'ORAS', 'STATIE', 'CONDUCTOR', 'CALATORIE', 'PROGRAM');

-------vederea constrangerilor tabelelor--------
CREATE OR REPLACE VIEW constrangeri_tabele AS
SELECT 
    table_name,
    constraint_name,
    constraint_type,
    search_condition
FROM 
    all_constraints
WHERE 
    table_name IN ('TREN', 'ORAS', 'STATIE', 'CONDUCTOR', 'CALATORIE', 'PROGRAM');

CREATE OR REPLACE VIEW structura AS
SELECT
    st.table_name,
    st.column_name,
    st.data_type,
    st.data_length,
    st.nullable,
    st.data_default
FROM 
    structura_tabele st;

CREATE OR REPLACE VIEW constrangeri AS
SELECT
    ct.table_name,
    ct.constraint_name,
    ct.constraint_type,
    ct.search_condition
FROM 
    constrangeri_tabele ct;

-- Verifica structura tabelelor
SELECT * FROM structura_tabele;

-- Verifica constrangerile tabelelor
SELECT * FROM constrangeri_tabele;


CREATE OR REPLACE VIEW numar_coloane AS
SELECT
    table_name,
    COUNT(column_name) AS numar_coloane
FROM 
    all_tab_columns
WHERE 
    table_name IN ('TREN', 'ORAS', 'STATIE', 'CONDUCTOR', 'CALATORIE', 'PROGRAM')
GROUP BY 
    table_name;


SELECT * FROM numar_coloane;



-- Secvența pentru TREN
CREATE SEQUENCE seq_tren START WITH 1 INCREMENT BY 1;

-- Secvența pentru ORAS
CREATE SEQUENCE seq_oras START WITH 1 INCREMENT BY 1;

-- Secvența pentru STATIE
CREATE SEQUENCE seq_statie START WITH 1 INCREMENT BY 1;


-- Verificare existență pentru TREN
SELECT * FROM all_sequences WHERE sequence_name = 'SEQ_TREN';

-- Verificare existență pentru ORAS
SELECT * FROM all_sequences WHERE sequence_name = 'SEQ_ORAS';

-- Verificare existență pentru STATIE
SELECT * FROM all_sequences WHERE sequence_name = 'SEQ_STATIE';



-- Inserare în tabelul TREN
INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('01-02-2024', 'DD-MM-YYYY'), 'marfar');

INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('02-02-2024', 'DD-MM-YYYY'), 'pasageri');

INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('03-02-2024', 'DD-MM-YYYY'), 'marfar');

INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('10-05-2024', 'DD-MM-YYYY'), 'pasageri');

SELECT * FROM TREN;

-- Update în tabelul TREN
UPDATE TREN SET available= 1 WHERE tip = 'marfar';

-- Ștergere din TREN
DELETE FROM TREN WHERE ID = 2;

SELECT * FROM TREN;

-- Inserare în ORAS
INSERT INTO ORAS (nume, judet) VALUES ('Berat', 'Alba');
INSERT INTO ORAS (nume, judet) VALUES ('Mirau', 'Alba');
INSERT INTO ORAS (nume, judet) VALUES ('Azuga', 'Prahova');
SELECT * FROM ORAS;



INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (1, 3, 120, 50.00);


INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (2, 1, 90, 30.00);

SELECT * FROM CALATORIE;

-- Modificare
UPDATE TREN SET tip = 'pasageri' WHERE ID = 1;

-- Modificare
UPDATE TREN SET achizitie = TO_DATE('15-02-2024', 'DD-MM-YYYY') WHERE ID = 3;


-- Modificare
UPDATE ORAS SET nume = 'Blaj' WHERE ID = 1;

-- Modificare
UPDATE ORAS SET judet = 'Sibiu' WHERE ID = 2;

SELECT * FROM TREN;
SELECT * FROM ORAS;

-- Selecție
SELECT * FROM CALATORIE WHERE durata > 100;

-- Selecție
SELECT * FROM CALATORIE WHERE pret BETWEEN 30 AND 40;


INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (1, 3, 120, 35.00);

INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (2, 1, 90, 30.00);

INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (3, 2, 150, 40.00);

-----8--------

-- Inserează înca 5 persoane în tabela CONDUCTOR
-- Inserare în tabela CONDUCTOR - Persoana 1
INSERT INTO CONDUCTOR (nume, prenume, nr_tel, nr_calatori) VALUES ('Popescu', 'Ana', '0720111222', 8);

-- Inserare în tabela CONDUCTOR - Persoana 2
INSERT INTO CONDUCTOR (nume, prenume, nr_tel, nr_calatori) VALUES ('Ionescu', 'Mihai', '0720333444', 12);

-- Inserare în tabela CONDUCTOR - Persoana 3
INSERT INTO CONDUCTOR (nume, prenume, nr_tel, nr_calatori) VALUES ('Dumitrescu', 'Elena', '0720555666', 5);

-- Inserare în tabela CONDUCTOR - Persoana 4
INSERT INTO CONDUCTOR (nume, prenume, nr_tel, nr_calatori) VALUES ('Radu', 'Ionel', '0720777888', 12);

-- Inserare în tabela CONDUCTOR - Persoana 5
INSERT INTO CONDUCTOR (nume, prenume, nr_tel, nr_calatori) VALUES ('Georgescu', 'Ionel', '0720999000', 12);

select* from CONDUCTOR;




--1- Subinterogare pentru a afișa persoanele care îndeplinesc condițiile specificate
SELECT
    id,
    nume,
    prenume,
    nr_tel,
    nr_calatori
FROM
    CONDUCTOR
WHERE
    substr(nume, 1, 1) IN ('P', 'I')
    AND nr_calatori > 9; 


select * from CALATORIE; 


--2- Subinterogare complexă pentru a obține detalii despre călătorii și orașele aferente---
SELECT
    c.id AS calatorie_id,
    c."start" AS start_calatorie,
    c.finish AS finish_calatorie,
    c.durata AS durata_calatorie,
    c.pret AS pret_calatorie,
    (
        SELECT
            o1.nume || ', ' || o1.judet
        FROM
            ORAS o1
        WHERE
            o1.id = c."start"
    ) AS oras_start,
    (
        SELECT
            o2.nume || ', ' || o2.judet
        FROM
            ORAS o2
        WHERE
            o2.id = c.finish
    ) AS oras_destinatie
FROM
    CALATORIE c;



--3-View pentru a afișa toate călătoriile 
--care au o durată mai mare de 100 de minute și un preț mai mic de 50 de unități monetare
SELECT * FROM calatorii_durate_pret;

CREATE OR REPLACE VIEW calatorii_durate_pret AS
SELECT *
FROM CALATORIE
WHERE durata > 100 AND pret < 50.00;

--4--View pentru a afișa toate orașele din județul "Alba"

SELECT * FROM orase_alba;

CREATE OR REPLACE VIEW orase_alba AS
SELECT *
FROM ORAS
WHERE judet = 'Alba';



--5-câte trenuri sunt de pasageri și câte de marfă
SELECT
    (
        SELECT COUNT(*)
        FROM TREN
        WHERE tip = 'pasageri'
    ) AS numar_trenuri_pasageri,
    (
        SELECT COUNT(*)
        FROM TREN
        WHERE tip = 'marfar'
    ) AS numar_trenuri_marfar
FROM DUAL;


--6-Raport privind numarul total de călatorii pentru fiecare tip de tren

SELECT
    T.tip AS tip_tren,
    COUNT(C.id) AS numar_calatorii
FROM
    TREN T
    LEFT JOIN PROGRAM P ON T.id = P.tren
    LEFT JOIN CALATORIE C ON P.calatorie = C.id
GROUP BY
    T.tip;

-- Inserare în tabelul TREN
INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('01-02-2024', 'DD-MM-YYYY'), 'marfar');

INSERT INTO TREN(achizitie, tip) 
VALUES(TO_DATE('02-02-2024', 'DD-MM-YYYY'), 'pasageri');


-- Inserare în tabelul CALATORIE
INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (1, 3, 120, 50.00);

INSERT INTO CALATORIE ("start", finish, durata, pret)
VALUES (2, 1, 90, 30.00);

-- Inserare în tabelul PROGRAM
INSERT INTO PROGRAM(calatorie, conductor, tren, plecare)
VALUES (22,21,4, TO_DATE('01-10-2024', 'DD-MM-YYYY'));

INSERT INTO PROGRAM(calatorie, conductor, tren, plecare)
VALUES (41,23,42, TO_DATE('12-12-2024', 'DD-MM-YYYY'));

INSERT INTO PROGRAM(calatorie, conductor, tren, plecare)
VALUES (23,3,1, TO_DATE('06-09-2024', 'DD-MM-YYYY'));

select *from TREN
select *from PROGRAM
SELECT *FROM CONDUCTOR
SELECT *FROM CALATORIE
SELECT *FROM STATIE
SELECT *FROM ORAS

---7--FULL OUTER JOIN între tabelele CONDUCTOR  și Program

SELECT
    CO.id AS conductor_id,
    CO.nume,
    CO.prenume,
    P.id AS program_id,
    P.plecare
FROM
    CONDUCTOR CO
    FULL OUTER JOIN PROGRAM P ON CO.id = P.conductor;


---9--Left Join între tabelele ORAS și STATIE

SELECT
    O.nume AS nume_oras,
    O.judet AS judet_oras,
    S.id AS id_statie,
    S.restaurant
FROM
    ORAS O
    LEFT JOIN STATIE S ON O.id = S.oras
WHERE
    S.id IS NOT NULL AND S.restaurant IS NOT NULL;


---10--


SELECT
    T.id AS tren_id,
    T.achizitie,
    T.tip,
    C.id AS calatorie_id,
    C."start" AS start_calatorie,
    C.finish AS finish_calatorie,
    C.durata AS durata_calatorie,
    C.pret AS pret_calatorie,
    P.plecare,
    CO.nume AS nume_conductor,
    CO.prenume AS prenume_conductor
FROM
    TREN T
    LEFT JOIN PROGRAM P ON T.id = P.tren
    LEFT JOIN CALATORIE C ON P.calatorie = C.id
    LEFT JOIN CONDUCTOR CO ON P.conductor = CO.id
ORDER BY
    T.id, P.plecare;

-- Use OFFSET and FETCH to get rows 11 to 20
SELECT
    T.id AS tren_id,
    T.achizitie,
    T.tip,
    C.id AS calatorie_id,
    C."start" AS start_calatorie,
    C.finish AS finish_calatorie,
    C.durata AS durata_calatorie,
    C.pret AS pret_calatorie,
    P.plecare,
    CO.nume AS nume_conductor,
    CO.prenume AS prenume_conductor
FROM
    TREN T
    LEFT JOIN PROGRAM P ON T.id = P.tren
    LEFT JOIN CALATORIE C ON P.calatorie = C.id
    LEFT JOIN CONDUCTOR CO ON P.conductor = CO.id
ORDER BY
    T.id, P.plecare
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
